import { openApiSpec } from "./openapi.js";
import { writeFileSync, mkdirSync } from "fs";
import { dirname } from "path";

/**
 * Generate SQL schema from OpenAPI specification
 */
export function generateSqlSchema(): string {
  const schemas = openApiSpec.getSchemas();
  const lines: string[] = [];

  lines.push(`-- Generated SQL schema from OpenAPI specification`);
  lines.push(`-- Do not edit this file manually - it will be overwritten`);
  lines.push(``);

  for (const [schemaName, schema] of Object.entries(schemas)) {
    const typedSchema = schema as any;
    if (typedSchema.type === "object" && typedSchema.properties) {
      lines.push(`-- Table for ${schemaName}`);
      lines.push(`CREATE TABLE IF NOT EXISTS ${toSnakeCase(schemaName)} (`);

      const columns: string[] = [];

      for (const [propName, propSchema] of Object.entries(typedSchema.properties)) {
        const prop = propSchema as any;
        const sqlType = getSqlType(prop);
        const nullable = typedSchema.required?.includes(propName) ? "NOT NULL" : "NULL";
        columns.push(`  ${toSnakeCase(propName)} ${sqlType} ${nullable}`);
      }

      lines.push(columns.join(",\n"));
      lines.push(`);`);
      lines.push(``);
    }
  }

  return lines.join("\n");
}

/**
 * Convert camelCase to snake_case
 */
function toSnakeCase(str: string): string {
  return str.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
}

/**
 * Convert OpenAPI type to SQL type
 */
function getSqlType(schema: any): string {
  switch (schema.type) {
    case "string":
      if (schema.format === "date-time") {
        return "DATETIME";
      }
      if (schema.format === "date") {
        return "DATE";
      }
      if (schema.maxLength) {
        return `VARCHAR(${schema.maxLength})`;
      }
      return "TEXT";

    case "integer":
      return "INTEGER";

    case "number":
      return "REAL";

    case "boolean":
      return "BOOLEAN";

    default:
      return "TEXT";
  }
}

/**
 * Generate SQL schema file from OpenAPI specification
 */
export function generateSqlSchemaFile(outputPath: string = "./schema.sql"): void {
  const sqlContent = generateSqlSchema();

  // Ensure the directory exists
  const dir = dirname(outputPath);
  mkdirSync(dir, { recursive: true });

  // Write the SQL file
  writeFileSync(outputPath, sqlContent, "utf8");
  console.log(`SQL schema generated: ${outputPath}`);
}
