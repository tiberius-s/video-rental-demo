/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List customers
         * @description List active customers with optional filtering
         */
        get: operations["Customers_list"];
        put?: never;
        /** Register new customer */
        post: operations["Customers_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer details */
        get: operations["Customers_read"];
        put?: never;
        post?: never;
        /**
         * Deactivate customer
         * @description Soft delete - marks customer as inactive, prevents new rentals
         */
        delete: operations["Customers_deactivate"];
        options?: never;
        head?: never;
        /** Update customer information */
        patch: operations["Customers_update"];
        trace?: never;
    };
    "/api/v1/customers/{customerId}/eligibility": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check rental eligibility
         * @description Verify customer can rent (no overdue items, account in good standing)
         */
        get: operations["Customers_checkEligibility"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/customers/{customerId}/rentals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer's rental history */
        get: operations["Customers_getRentals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/docs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** API documentation */
        get: operations["Documentation_getDocs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: operations["Health_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add new video copy
         * @description Add physical copy to inventory
         */
        post: operations["InventoryManagement_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/video/{videoId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get video inventory
         * @description Get all copies for a specific video
         */
        get: operations["InventoryManagement_getByVideo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/inventory/{inventoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove inventory copy
         * @description Permanently remove copy from inventory (for damaged/lost items)
         */
        delete: operations["InventoryManagement_remove"];
        options?: never;
        head?: never;
        /**
         * Update inventory item
         * @description Update copy status or condition
         */
        patch: operations["InventoryManagement_update"];
        trace?: never;
    };
    "/api/v1/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process payment
         * @description Handle payment for rental, late fees, or other charges
         */
        post: operations["Payments_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/customer/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customer payment history */
        get: operations["Payments_getByCustomer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/payments/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get payment details */
        get: operations["Payments_read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rentals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new rental
         * @description Process video rental with eligibility checks and pricing
         */
        post: operations["Rentals_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rentals/overdue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List overdue rentals
         * @description Get rentals past due date for follow-up
         */
        get: operations["Rentals_getOverdue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rentals/{rentalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get rental details */
        get: operations["Rentals_read"];
        put?: never;
        post?: never;
        /**
         * Cancel rental
         * @description Cancel active rental and process refund if applicable
         */
        delete: operations["Rentals_cancel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/rentals/{rentalId}/return": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Return rented video
         * @description Process return, calculate late fees if applicable
         */
        post: operations["Rentals_returnVideo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List videos with search */
        get: operations["Videos_list"];
        put?: never;
        /** Add new video to catalog */
        post: operations["Videos_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/videos/{videoId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get video details */
        get: operations["Videos_read"];
        put?: never;
        post?: never;
        /**
         * Remove video from catalog
         * @description Soft delete - marks video as inactive, prevents new rentals
         */
        delete: operations["Videos_remove"];
        options?: never;
        head?: never;
        /** Update video information */
        patch: operations["Videos_update"];
        trace?: never;
    };
    "/api/v1/videos/{videoId}/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check video availability */
        get: operations["Videos_checkAvailability"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description API documentation metadata */
        ApiDocumentation: {
            /** @description API title */
            title: string;
            /** @description API version */
            version: string;
            /** @description API description */
            description: string;
            /** @description Base URL */
            baseUrl: string;
            /** @description Documentation links */
            links: {
                /** @description OpenAPI specification URL */
                openapi?: string;
                /** @description Business documentation URL */
                documentation?: string;
                /** @description Health check URL */
                health?: string;
            };
        };
        /**
         * @description Physical condition of a video copy
         * @enum {string}
         */
        CopyCondition: "Good" | "Defective";
        /**
         * @description Status of a video copy
         * @enum {string}
         */
        CopyStatus: "Available" | "Rented" | "Retired";
        /** @description Customer entity for API operations */
        Customer: {
            /**
             * Format: uuid
             * @description The ID of the customer
             */
            id: string;
            /** @description The name of the customer */
            name: string;
            /** @description The email of the customer */
            email: components["schemas"]["ValueObjects.Email"];
            /** @description The address of the customer */
            address: components["schemas"]["ValueObjects.Address"];
            /** @description The phone number of the customer */
            phoneNumber: components["schemas"]["ValueObjects.PhoneNumber"];
            /**
             * Format: decimal
             * @description Customer discount percentage (0-100)
             */
            discountPercentage?: number;
            /**
             * Format: date
             * @description Date customer joined
             */
            memberSince: string;
            /** @description Current customer status */
            status: components["schemas"]["CustomerStatus"];
        };
        /** @description Customer entity for API operations */
        CustomerCreate: {
            /** @description The name of the customer */
            name: string;
            /** @description The email of the customer */
            email: components["schemas"]["ValueObjects.Email"];
            /** @description The address of the customer */
            address: components["schemas"]["ValueObjects.Address"];
            /** @description The phone number of the customer */
            phoneNumber: components["schemas"]["ValueObjects.PhoneNumber"];
            /**
             * Format: decimal
             * @description Customer discount percentage (0-100)
             */
            discountPercentage?: number;
            /**
             * Format: date
             * @description Date customer joined
             */
            memberSince: string;
            /** @description Current customer status */
            status: components["schemas"]["CustomerStatus"];
        };
        /**
         * @description Customer status for API operations
         * @enum {string}
         */
        CustomerStatus: "Active" | "Suspended" | "Inactive";
        /** @description Customer entity for API operations */
        CustomerUpdate: {
            /**
             * Format: uuid
             * @description The ID of the customer
             */
            id?: string;
            /** @description The name of the customer */
            name?: string;
            /** @description The email of the customer */
            email?: components["schemas"]["ValueObjects.EmailUpdate"];
            /** @description The address of the customer */
            address?: components["schemas"]["ValueObjects.AddressUpdate"];
            /** @description The phone number of the customer */
            phoneNumber?: components["schemas"]["ValueObjects.PhoneNumberUpdate"];
            /**
             * Format: decimal
             * @description Customer discount percentage (0-100)
             */
            discountPercentage?: number;
            /**
             * Format: date
             * @description Date customer joined
             */
            memberSince?: string;
            /** @description Current customer status */
            status?: components["schemas"]["CustomerStatus"];
        };
        /** @description API health status response */
        HealthResponse: {
            /**
             * @description Service status
             * @enum {string}
             */
            status: "healthy" | "degraded" | "unhealthy";
            /** @description Service name */
            service: string;
            /** @description Service version */
            version: string;
            /**
             * Format: date-time
             * @description Current timestamp
             */
            timestamp: string;
            /** @description Additional health details */
            details?: Record<string, never>;
        };
        /** @description Inventory tracking for video copies */
        Inventory: {
            /**
             * Format: uuid
             * @description The unique ID of the inventory item
             */
            id: string;
            /** @description The ID of the video this inventory tracks */
            videoId: string;
            /** @description Physical copy identifier (barcode, serial number) */
            copyId: string;
            /** @description Current condition of the copy */
            condition: components["schemas"]["CopyCondition"];
            /** @description Current status of this copy */
            status: components["schemas"]["CopyStatus"];
            /**
             * Format: date-time
             * @description Date this copy was acquired
             */
            dateAcquired: string;
            /**
             * Format: date-time
             * @description Date this copy was last rented
             */
            lastRentedDate?: string;
        };
        /** @description Inventory tracking for video copies */
        InventoryCreate: {
            /** @description The ID of the video this inventory tracks */
            videoId: string;
            /** @description Physical copy identifier (barcode, serial number) */
            copyId: string;
            /** @description Current condition of the copy */
            condition: components["schemas"]["CopyCondition"];
            /** @description Current status of this copy */
            status: components["schemas"]["CopyStatus"];
            /**
             * Format: date-time
             * @description Date this copy was acquired
             */
            dateAcquired: string;
            /**
             * Format: date-time
             * @description Date this copy was last rented
             */
            lastRentedDate?: string;
        };
        /** @description Inventory tracking for video copies */
        InventoryUpdate: {
            /**
             * Format: uuid
             * @description The unique ID of the inventory item
             */
            id?: string;
            /** @description The ID of the video this inventory tracks */
            videoId?: string;
            /** @description Physical copy identifier (barcode, serial number) */
            copyId?: string;
            /** @description Current condition of the copy */
            condition?: components["schemas"]["CopyCondition"];
            /** @description Current status of this copy */
            status?: components["schemas"]["CopyStatus"];
            /**
             * Format: date-time
             * @description Date this copy was acquired
             */
            dateAcquired?: string;
            /**
             * Format: date-time
             * @description Date this copy was last rented
             */
            lastRentedDate?: string;
        };
        /** @description Payment transaction for rentals and fees */
        Payment: {
            /**
             * Format: uuid
             * @description The unique ID of the payment
             */
            id: string;
            /** @description The ID of the customer making the payment */
            customerId: string;
            /** @description The ID of the rental this payment is for */
            rentalId?: string;
            /** @description Amount paid */
            amount: components["schemas"]["ValueObjects.Money"];
            /** @description Type of payment */
            paymentType: components["schemas"]["PaymentType"];
            /** @description Payment method used */
            paymentMethod: components["schemas"]["PaymentMethod"];
            /**
             * Format: date-time
             * @description Date and time of payment
             */
            paymentDate: string;
            /** @description Reference number for the payment */
            referenceNumber?: string;
            /** @description Current status of the payment */
            status: components["schemas"]["PaymentStatus"];
        };
        /** @description Payment transaction for rentals and fees */
        PaymentCreate: {
            /** @description The ID of the customer making the payment */
            customerId: string;
            /** @description The ID of the rental this payment is for */
            rentalId?: string;
            /** @description Amount paid */
            amount: components["schemas"]["ValueObjects.Money"];
            /** @description Type of payment */
            paymentType: components["schemas"]["PaymentType"];
            /** @description Payment method used */
            paymentMethod: components["schemas"]["PaymentMethod"];
            /**
             * Format: date-time
             * @description Date and time of payment
             */
            paymentDate: string;
            /** @description Reference number for the payment */
            referenceNumber?: string;
            /** @description Current status of the payment */
            status: components["schemas"]["PaymentStatus"];
        };
        /**
         * @description Method of payment
         * @enum {string}
         */
        PaymentMethod: "Cash" | "CreditCard" | "DebitCard" | "Check" | "GiftCard";
        /**
         * @description Status of a payment
         * @enum {string}
         */
        PaymentStatus: "Completed" | "Pending" | "Failed" | "Refunded" | "Cancelled";
        /**
         * @description Type of payment being made
         * @enum {string}
         */
        PaymentType: "Rental" | "LateFee" | "Damage" | "Membership";
        /** @description Rental entity for API operations */
        Rental: {
            /**
             * Format: uuid
             * @description The unique ID of the rental
             */
            id: string;
            /** @description The ID of the customer renting the video */
            customerId: string;
            /** @description The ID of the video being rented */
            videoId: string;
            /** @description The ID of the specific inventory copy being rented */
            inventoryId: string;
            /** @description Rental period information */
            period: components["schemas"]["ValueObjects.RentalPeriod"];
            /** @description The rental fee paid */
            rentalFee: components["schemas"]["ValueObjects.Money"];
            /** @description Any late fees incurred */
            lateFee?: components["schemas"]["ValueObjects.Money"];
            /** @description Current status of the rental */
            status: components["schemas"]["RentalStatus"];
        };
        /**
         * @description Status of a rental
         * @enum {string}
         */
        RentalStatus: "Active" | "Returned" | "Overdue" | "Cancelled" | "Extended";
        /** @description Address value object representing a physical location */
        "ValueObjects.Address": {
            /** @description Street address including number and street name */
            street: string;
            /** @description City name */
            city: string;
            /** @description US State */
            state: components["schemas"]["ValueObjects.State"];
            /** @description ZIP/Postal code */
            zipCode: string;
        };
        /** @description Address value object representing a physical location */
        "ValueObjects.AddressUpdate": {
            /** @description Street address including number and street name */
            street?: string;
            /** @description City name */
            city?: string;
            /** @description US State */
            state?: components["schemas"]["ValueObjects.State"];
            /** @description ZIP/Postal code */
            zipCode?: string;
        };
        /** @description Email value object with validation */
        "ValueObjects.Email": {
            /**
             * Format: email
             * @description Email address
             */
            value: string;
        };
        /** @description Email value object with validation */
        "ValueObjects.EmailUpdate": {
            /**
             * Format: email
             * @description Email address
             */
            value?: string;
        };
        /** @description Money value object representing currency amounts */
        "ValueObjects.Money": {
            /**
             * Format: decimal
             * @description The amount in the smallest currency unit (e.g., cents)
             */
            amount: number;
            /** @description Currency code (ISO 4217) */
            currency: string;
        };
        /** @description Phone number value object with validation */
        "ValueObjects.PhoneNumber": {
            /** @description Phone number in E.164 format */
            value: string;
        };
        /** @description Phone number value object with validation */
        "ValueObjects.PhoneNumberUpdate": {
            /** @description Phone number in E.164 format */
            value?: string;
        };
        /** @description Rental period value object representing the duration of a rental */
        "ValueObjects.RentalPeriod": {
            /**
             * Format: date-time
             * @description Start date and time of the rental
             */
            startDate: string;
            /**
             * Format: date-time
             * @description Due date and time for return
             */
            dueDate: string;
            /**
             * Format: date-time
             * @description Actual return date and time (null if not returned)
             */
            returnDate?: string;
        };
        /**
         * @description Standard rental duration options
         * @enum {string}
         */
        "ValueObjects.StandardRentalDuration": "OneDay" | "ThreeDays" | "OneWeek" | "TwoWeeks";
        /** @enum {string} */
        "ValueObjects.State": "AL" | "AK" | "AZ" | "AR" | "CA" | "CO" | "CT" | "DE" | "FL" | "GA" | "HI" | "ID" | "IL" | "IN" | "IA" | "KS" | "KY" | "LA" | "ME" | "MD" | "MA" | "MI" | "MN" | "MS" | "MO" | "MT" | "NE" | "NV" | "NH" | "NJ" | "NM" | "NY" | "NC" | "ND" | "OH" | "OK" | "OR" | "PA" | "RI" | "SC" | "SD" | "TN" | "TX" | "UT" | "VT" | "VA" | "WA" | "WV" | "WI" | "WY";
        /** @description A video that can be rented */
        Video: {
            /**
             * Format: uuid
             * @description The ID of the video
             */
            id: string;
            /** @description The title of the video */
            title: string;
            /** @description The genre of the video */
            genre: string;
            /** @description The MPAA rating of the video (G, PG, PG-13, R, NC-17) */
            rating: string;
            /**
             * Format: int32
             * @description The year the video was released
             */
            releaseYear: number;
            /**
             * Format: int32
             * @description Duration of the video in minutes
             */
            duration: number;
            /** @description Brief description of the video */
            description: string;
            /** @description Director of the video */
            director: string;
            /**
             * Format: decimal
             * @description Daily rental price
             */
            rentalPrice: number;
            /**
             * Format: int32
             * @description Number of copies available for rental
             */
            availableCopies: number;
            /**
             * Format: int32
             * @description Total number of copies owned
             */
            totalCopies: number;
        };
        /** @description A video that can be rented */
        VideoCreate: {
            /** @description The title of the video */
            title: string;
            /** @description The genre of the video */
            genre: string;
            /** @description The MPAA rating of the video (G, PG, PG-13, R, NC-17) */
            rating: string;
            /**
             * Format: int32
             * @description The year the video was released
             */
            releaseYear: number;
            /**
             * Format: int32
             * @description Duration of the video in minutes
             */
            duration: number;
            /** @description Brief description of the video */
            description: string;
            /** @description Director of the video */
            director: string;
            /**
             * Format: decimal
             * @description Daily rental price
             */
            rentalPrice: number;
            /**
             * Format: int32
             * @description Number of copies available for rental
             */
            availableCopies: number;
            /**
             * Format: int32
             * @description Total number of copies owned
             */
            totalCopies: number;
        };
        /** @description A video that can be rented */
        VideoUpdate: {
            /**
             * Format: uuid
             * @description The ID of the video
             */
            id?: string;
            /** @description The title of the video */
            title?: string;
            /** @description The genre of the video */
            genre?: string;
            /** @description The MPAA rating of the video (G, PG, PG-13, R, NC-17) */
            rating?: string;
            /**
             * Format: int32
             * @description The year the video was released
             */
            releaseYear?: number;
            /**
             * Format: int32
             * @description Duration of the video in minutes
             */
            duration?: number;
            /** @description Brief description of the video */
            description?: string;
            /** @description Director of the video */
            director?: string;
            /**
             * Format: decimal
             * @description Daily rental price
             */
            rentalPrice?: number;
            /**
             * Format: int32
             * @description Number of copies available for rental
             */
            availableCopies?: number;
            /**
             * Format: int32
             * @description Total number of copies owned
             */
            totalCopies?: number;
        };
    };
    responses: never;
    parameters: {
        /** @description Number of items per page (max 100) */
        "PaginationParams.limit": number;
        /** @description Page number (1-based) */
        "PaginationParams.page": number;
        /** @description Sort field */
        "PaginationParams.sortBy": string;
        /** @description Sort direction */
        "PaginationParams.sortOrder": "asc" | "desc";
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    Customers_list: {
        parameters: {
            query?: {
                status?: "Active" | "Suspended" | "Inactive";
                /** @description Page number (1-based) */
                page?: components["parameters"]["PaginationParams.page"];
                /** @description Number of items per page (max 100) */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Sort field */
                sortBy?: components["parameters"]["PaginationParams.sortBy"];
                /** @description Sort direction */
                sortOrder?: components["parameters"]["PaginationParams.sortOrder"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Array of items */
                        data: components["schemas"]["Customer"][];
                        /** @description Pagination metadata */
                        pagination: {
                            /**
                             * Format: int32
                             * @description Current page number
                             */
                            page: number;
                            /**
                             * Format: int32
                             * @description Items per page
                             */
                            limit: number;
                            /**
                             * Format: int32
                             * @description Total number of items
                             */
                            total: number;
                            /**
                             * Format: int32
                             * @description Total number of pages
                             */
                            pages: number;
                            /** @description Whether there is a next page */
                            hasNext: boolean;
                            /** @description Whether there is a previous page */
                            hasPrev: boolean;
                        };
                    };
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Customers_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerCreate"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Customers_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Customers_deactivate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Customers_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customerId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomerUpdate"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Customer"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Customers_checkEligibility: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Can customer rent new videos */
                        eligible: boolean;
                        /** @description Reason if not eligible */
                        reason?: string;
                        /**
                         * Format: int32
                         * @description Number of active rentals
                         */
                        activeRentals: number;
                        /**
                         * Format: int32
                         * @description Number of overdue rentals
                         */
                        overdueRentals: number;
                        /** @description Outstanding fees */
                        outstandingFees: components["schemas"]["ValueObjects.Money"];
                    };
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Customers_getRentals: {
        parameters: {
            query?: {
                status?: "active" | "returned" | "overdue";
                /** @description Page number (1-based) */
                page?: components["parameters"]["PaginationParams.page"];
                /** @description Number of items per page (max 100) */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Sort field */
                sortBy?: components["parameters"]["PaginationParams.sortBy"];
                /** @description Sort direction */
                sortOrder?: components["parameters"]["PaginationParams.sortOrder"];
            };
            header?: never;
            path: {
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Array of items */
                        data: components["schemas"]["Rental"][];
                        /** @description Pagination metadata */
                        pagination: {
                            /**
                             * Format: int32
                             * @description Current page number
                             */
                            page: number;
                            /**
                             * Format: int32
                             * @description Items per page
                             */
                            limit: number;
                            /**
                             * Format: int32
                             * @description Total number of items
                             */
                            total: number;
                            /**
                             * Format: int32
                             * @description Total number of pages
                             */
                            pages: number;
                            /** @description Whether there is a next page */
                            hasNext: boolean;
                            /** @description Whether there is a previous page */
                            hasPrev: boolean;
                        };
                    };
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Documentation_getDocs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiDocumentation"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Health_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service unavailable. */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    InventoryManagement_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InventoryCreate"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Inventory"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryManagement_getByVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                videoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Video information */
                        video: components["schemas"]["Video"];
                        /** @description Physical copies */
                        copies: components["schemas"]["Inventory"][];
                        /**
                         * Format: int32
                         * @description Available count
                         */
                        availableCount: number;
                        /**
                         * Format: int32
                         * @description Total count
                         */
                        totalCount: number;
                    };
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryManagement_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                inventoryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InventoryManagement_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                inventoryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InventoryUpdate"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Inventory"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Payments_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentCreate"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Payments_getByCustomer: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: components["parameters"]["PaginationParams.page"];
                /** @description Number of items per page (max 100) */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Sort field */
                sortBy?: components["parameters"]["PaginationParams.sortBy"];
                /** @description Sort direction */
                sortOrder?: components["parameters"]["PaginationParams.sortOrder"];
            };
            header?: never;
            path: {
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Customer payments */
                        payments: {
                            /** @description Array of items */
                            data: components["schemas"]["Payment"][];
                            /** @description Pagination metadata */
                            pagination: {
                                /**
                                 * Format: int32
                                 * @description Current page number
                                 */
                                page: number;
                                /**
                                 * Format: int32
                                 * @description Items per page
                                 */
                                limit: number;
                                /**
                                 * Format: int32
                                 * @description Total number of items
                                 */
                                total: number;
                                /**
                                 * Format: int32
                                 * @description Total number of pages
                                 */
                                pages: number;
                                /** @description Whether there is a next page */
                                hasNext: boolean;
                                /** @description Whether there is a previous page */
                                hasPrev: boolean;
                            };
                        };
                        /** @description Total paid */
                        totalPaid: components["schemas"]["ValueObjects.Money"];
                        /** @description Outstanding balance */
                        outstandingBalance: components["schemas"]["ValueObjects.Money"];
                    };
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Payments_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                paymentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payment"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Rentals_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Customer renting the video */
                    customerId: string;
                    /** @description Video to rent */
                    videoId: string;
                    /** @description Rental duration */
                    duration: components["schemas"]["ValueObjects.StandardRentalDuration"];
                };
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Created rental */
                        rental: components["schemas"]["Rental"];
                        /** @description Payment due */
                        payment: components["schemas"]["Payment"];
                        /** @description Due date */
                        dueDate: string;
                    };
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Rentals_getOverdue: {
        parameters: {
            query?: {
                /** @description Page number (1-based) */
                page?: components["parameters"]["PaginationParams.page"];
                /** @description Number of items per page (max 100) */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Sort field */
                sortBy?: components["parameters"]["PaginationParams.sortBy"];
                /** @description Sort direction */
                sortOrder?: components["parameters"]["PaginationParams.sortOrder"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Overdue rentals */
                        rentals: {
                            /** @description Array of items */
                            data: components["schemas"]["Rental"][];
                            /** @description Pagination metadata */
                            pagination: {
                                /**
                                 * Format: int32
                                 * @description Current page number
                                 */
                                page: number;
                                /**
                                 * Format: int32
                                 * @description Items per page
                                 */
                                limit: number;
                                /**
                                 * Format: int32
                                 * @description Total number of items
                                 */
                                total: number;
                                /**
                                 * Format: int32
                                 * @description Total number of pages
                                 */
                                pages: number;
                                /** @description Whether there is a next page */
                                hasNext: boolean;
                                /** @description Whether there is a previous page */
                                hasPrev: boolean;
                            };
                        };
                        /** @description Total late fees outstanding */
                        totalLateFees: components["schemas"]["ValueObjects.Money"];
                    };
                };
            };
            /** @description Access is unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Rentals_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rentalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Rental"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Rentals_cancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rentalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Rentals_returnVideo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rentalId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * Format: date-time
                     * @description Return date/time
                     */
                    returnDate: string;
                    /** @description Condition of returned copy */
                    condition?: components["schemas"]["CopyCondition"];
                    /** @description Return notes */
                    notes?: string;
                };
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Updated rental */
                        rental: components["schemas"]["Rental"];
                        /** @description Late fees (if any) */
                        lateFees?: components["schemas"]["ValueObjects.Money"];
                        /** @description Additional payment required */
                        additionalPayment?: components["schemas"]["Payment"];
                        /** @description Return was on time */
                        onTime: boolean;
                    };
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Videos_list: {
        parameters: {
            query?: {
                search?: string;
                genre?: string;
                availableOnly?: boolean;
                /** @description Page number (1-based) */
                page?: components["parameters"]["PaginationParams.page"];
                /** @description Number of items per page (max 100) */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Sort field */
                sortBy?: components["parameters"]["PaginationParams.sortBy"];
                /** @description Sort direction */
                sortOrder?: components["parameters"]["PaginationParams.sortOrder"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Array of items */
                        data: components["schemas"]["Video"][];
                        /** @description Pagination metadata */
                        pagination: {
                            /**
                             * Format: int32
                             * @description Current page number
                             */
                            page: number;
                            /**
                             * Format: int32
                             * @description Items per page
                             */
                            limit: number;
                            /**
                             * Format: int32
                             * @description Total number of items
                             */
                            total: number;
                            /**
                             * Format: int32
                             * @description Total number of pages
                             */
                            pages: number;
                            /** @description Whether there is a next page */
                            hasNext: boolean;
                            /** @description Whether there is a previous page */
                            hasPrev: boolean;
                        };
                    };
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Videos_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VideoCreate"];
            };
        };
        responses: {
            /** @description The request has succeeded and a new resource has been created as a result. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Video"];
                };
            };
            /** @description The server could not understand the request due to invalid syntax. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Videos_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                videoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Video"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Videos_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                videoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request conflicts with the current state of the server. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Videos_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                videoId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VideoUpdate"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Video"];
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Videos_checkAvailability: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                videoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Whether copies are available */
                        available: boolean;
                        /**
                         * Format: int32
                         * @description Number of available copies
                         */
                        availableCopies: number;
                        /**
                         * Format: int32
                         * @description Total copies owned
                         */
                        totalCopies: number;
                    };
                };
            };
            /** @description The server cannot find the requested resource. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
